source("http://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocLite.R")
biocLite()
biocLite(c( cluster, lattice,
survival
biocLite(c( "cluster", "lattice","survival"))
?biocLite
install.packages("cluster","lattice","survival")
install.packages("cluster","survival")
install.packages("cluster","lattice","survival")
RStudio()
q()
find.package("devtools")
insta;;.package("devtools")
install.package("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
find_rtools()
install.packages("KernSmooth")
source("C:\Users\Eugene Nel\Downloads\KernSmooth_2.23-15.zip")
source("\Users\Eugene Nel\Downloads\KernSmooth_2.23-15.zip")
source("Users\Eugene Nel\Downloads\KernSmooth_2.23-15.zip")
source("C:/Users/Eugene Nel/Downloads/KernSmooth_2.23-15.zip")
library(KernSmooth)
ls
getwd()
getwd()
setwd("C:/Users/Eugene Nel/Desktop/Coursera/02 - R")
getwd()
source("firstRcode.R")
ls()
myfunction()
myfunction()
second("4")
second(4)
second(4:100)
clear()
cls
help()
x <- 1
print(x)
x
msg <- "hello"
msg
print(mg)
print(msg)
x <- ##
2
x
x <- ## Incomplete expression
2
x
print (x)
x <- 5
x
print(x)
print(x)
x <- 1:20
x
print (x)
x <- 1:2000
print (x)
1/0
1/Inf
1/inf
1/Inf
0/0
x <- c(0.5,0.6)
x
x <- vector("numeric", length = 10)
x
x <- c(0.5,0.6)
x[1]
x[2]
y <- c(1.7,"a")
x
y
y <- c(TRUE,2)
Y
y
y <- c(TRUE,"a")
y
x <- 0:6
x
class(x)
as.numeric(x)
as.logical(x)
as.character(x)
as.logical(y)
y
y <- c(TRUE,2)
as.character(y)
x <- list(1,"a",TRUE,1+4i)
x
x[[3]]
x[[2]]
x[[4]]
x[[1]]
m <- matrix(nrow=2,ncol=3)
m
m<-
1
m
m <- matrix(nrow=2,ncol=3)
dim(m)
attributes(m)
m <- matrix(1:6,nrow=2,ncol=3)
m
m <- matrix(1:99,nrow=2,ncol=3)
m <- matrix(1:3,nrow=2,ncol=3)
m
m <- 1:10
,
m
dim(m) <- c(2,5)
m
x <- 1:3
y <- 10:12
cbind(x,y)
rbind(x,y)
msg <- ""
x <- factor(c("yes,"yes","no","yes","no"))
x <- factor(c("yes,"yes","no","yes","no"))
x <- factor(c("yes, "yes", "no", "yes", "no"))
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
table(x)
unclass(x = x)
x <- factor(c("yes", "yes", "no", "yes", "no"),)
x <- factor(c("yes", "yes", "no", "yes", "no"),levels = c("yes","no"))
x
x <- factor(c("yes", "yes", "no", "yes", "no"),levels = c("no","yes"))
x
x <- factor(c("yes", "yes", "no", "yes", "no"),levels = c("yes","no"))
x
is.na(x)
is.nan(x)
is.nan(m)
is.na(m)
x <- c(1,2,NA,10,3)
is.na(x)
is.nan(x)
x <- c(1,2,NaN,NA,4)
is.na(x)
is.nan(x)
x <- data.frame(foo = 1:4,bar=c(T,T,F,F))
x
x <- 1:3
names(x)
names(x) <- c("foo","bar","norf")
x
names(x)
x <- list(a=1,b=2,c=3)
x
m <= matrix(1:4,nrow=2,ncol=2)
m <- matrix(1:4,nrow=2,ncol=2)
m
data <- read.csv("foo.csv")
data <- read.table("foo.csv")
data <- read.table("foo.csv",,",",)
data <- read.table("foo.csv")
data
x<- list(a = 1:5,b=rnorm(10))
lapply(x,mean)
x<- list(a = 1:4,b=rnorm(10),c=rnorm(20,1),d = rnorm(100,5))
lapply(x,mean)
x <- 1:4
lapply(x,runif)
lapply(x,runif,min = 0,max = 10)
x <- list(a = matrix(1:4,2,2),b = matrix(1:6,3,2))
x
lapply(x,function(alt) elt[,1])
lapply(x,function(alt) alt[,1])
sapply(x,mean)
str(apply)
x <- matrix(rnorm(200),20,10)
apply(x,2,mean)
apply(x,1,num)
apply(x,1,rnum)
apply(x,1,sum)
x <- matrix(rnorm(200),20,10)
apply(x,1,quantile,probs = c(0.25,0.75))
a <- array(rnorm(2*2*10),c(2,2,10)
)
apply(a,c(1,2),mean)
mapply
str(mapply)
mapply(rep,1:4,4:1)
noise <- function(n,mean,ad({rnorm,mean,ad}))
noise <- function(n,mean,md({rnorm,mean,md}))
str(tapply)
str(split)
x <- c(rnorm(10),runif(10),rnorm(10,1))
f <- gl(3,10)
split(x,f)
f <- gl(3,30)
split(x,f)
f <- gl(3,10)
split(x,f)
lapply(split(x,f),mean)
library(datasets)
head(airquality)
s <- split(airquality,airquality$Month)
lapply(s,function(x) colmeans(x[, c("Ozone","Solar.R","Wind")]))
lapply(s,function(x) colMeans(x[, c("Ozone","Solar.R","Wind")]))
sapply(s,function(x) colMeans(x[, c("Ozone","Solar.R","Wind")]))
sapply(s,function(x) colMeans(x[, c("Ozone","Solar.R","Wind")]),na.rm=TRUW)
sapply(s,function(x) colMeans(x[, c("Ozone","Solar.R","Wind")]),na.rm=TRUE)
sapply(s,function(x) colMeans(x[, c("Ozone","Solar.R","Wind")],na.rm=TRUE))
x <- rnorm(10)
f1 <- gl(2,5)
f2 <- gl(5,2)
f1
f2
interaction(f1,f2)
str(split(x,list(f1,f2)))
log(-1)
printmessage <- function(x){
if(x > 0)
}
printmessage <- function(x){
if(x > 0){
print("x is greater than zero")
}else{}
}
printmessage <- function(x){
if(x > 0){
print("x is greater than zero")
}else{
print("x is less than zero")
}
invisible(x)
}
printmessage()
printmessage(-5)
printmessage(5)
printmessage <- function(x = 0){
if(x > 0){
print("x is greater than zero")
}else{
print("x is less than zero")
}
invisible(x)
}
printmessage()
printmessage(1)
printmessage <- function(x){
if(x > 0){
print("x is greater than zero")
}else{
print("x is less than zero")
}
invisible(x)
}
printmessage(1)
printmessage()
printmessage(NA)
printmessage <- function(x){
if(x > 0){
print("x is greater than zero")
}else{
print("x is less than zero")
}
}
printmessage(NA)
printmessage()
printmessage(1)
printmessage2 <- function(x){
if(is.na(x)){
print("x is missing a value!")
}
else if(x > 0){
print("x is greater than zero")
}else{
print("x is less than zero")
}
invisible(x)
}
x <- log(-1)
printmessage2(x)
getwd()
invisible()
invisible
mean(x)
traceback()
mean(z)
traceback()
lm (y-x)
traceback()
debug(lm)
lm(y-x)
traceback()
options(error = recover)
read.csv("nosuchfile")
read.csv
read.table()
read.table
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
bye()
setwd(""C:/Users/Eugene Nel/Desktop/Coursera/Assignments/Week3/ProgrammingAssignment2)
setwd("C:/Users/Eugene Nel/Desktop/Coursera/Assignments/Week3/ProgrammingAssignment2")
getwd()
setwd("C:/Users/Eugene Nel/Desktop/Coursera/Assignments/")
setwd("C:/Users/Eugene Nel/Desktop/Coursera/Assignments/ProgrammingAssignment2")
setwd("C:/Users/Eugene Nel/Desktop/Coursera/Assignments/")
setwd("C:/Users/Eugene Nel/Desktop/Coursera/Assignments/ProgrammingAssignment2")
source("cachematrix.R")
myMatrix <- makeCacheMatrix(matrix(c(1:150),10,150))
myMatrix$get()
myMatrix <- makeCacheMatrix(matrix(c(1:15),3,5))
myMatrix$get()
myMatrix <- makeCacheMatrix(matrix(c(100:150),30,5))
myMatrix$get()
myMatrix <- makeCacheMatrix(matrix(c(1:150),30,5))
myMatrix$get()
?solve
myMatrix$getinv
myMatrix$getinv()
source("cachematrix.R")
myMatrix$set(matrix(c(150:300),30,5))
myMatrix$set(matrix(c(151:300),30,5))
cacheSolve(myMatrix)
cacheSolve(myMatrix)
myMatrix$set(matrix(c(200:300),10,10))
myMatrix$set(matrix(c(201:300),10,10))
cacheSolve(myMatrix)
